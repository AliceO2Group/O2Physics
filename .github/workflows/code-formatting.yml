---
name: Formatting

'on': [pull_request_target]

jobs:
  clang-format:
    name: clang-format
    # We need at least 20.04 to install clang-format-11.
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
          # We need the history of the dev branch all the way back to where the
          # PR diverged. We're fetching everything here, as we don't know how
          # many commits back that point is.
          fetch-depth: 0

      - name: Install prerequisites
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo update-alternatives --install /usr/bin/clang-format \
            clang-format /usr/bin/clang-format-11 100
          sudo update-alternatives --install /usr/bin/git-clang-format \
            git-clang-format /usr/bin/git-clang-format-11 100

      # We need to fetch the PR's head commit to base our cleanup commit on.
      - name: Fetch PR branch
        env:
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          git config --global user.email 'alibuild@cern.ch'
          git config --global user.name 'ALICE Action Bot'
          git fetch origin "$BASE_BRANCH" "pull/$PR_NUMBER/head:$PR_BRANCH"

      - name: Run clang format
        id: clang_format
        env:
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
        run: |
          set -x
          # $BASE_SHA is the latest commit on the branch the PR will be merged
          # into, NOT the commit this PR derives from! For that, we need to find
          # the latest common ancestor between the PR and the branch we are
          # merging into.
          base_commit=$(git merge-base HEAD "$BASE_SHA")
          # Find changed files, ignoring binary files.
          readarray -d '' commit_files < \
            <(git diff -z --diff-filter d --name-only --merge-base "$BASE_SHA")
          [ ${#commit_files[@]} -gt 0 ] || { echo "No files to check"; exit 0; }

          # Check for invalid file extensions for C++ code.
          have_invalid_extension=
          for file in "${commit_files[@]}"; do
            case $file in
              *.hxx|*.cc|*.hpp)
                echo "::error file=$x::$x uses non-allowed extension"
                have_invalid_extension=true ;;
            esac
          done
          # Abort now if invalid file extensions found.
          [ -z "$have_invalid_extension" ]

          patch=$(git-clang-format --commit "$base_commit" --diff \
                                   --style file "${commit_files[@]}")
          if [ "$patch" = 'no modified files to format' ] ||
             [ "$patch" = 'clang-format did not modify any files' ]
          then
            cat << EOF
          ::notice::clang-format passed.
          ::set-output name=cleanup_commit::
          ::set-output name=clean::true
          EOF
            exit 0
          fi

          echo "$patch" | patch -p1
          git commit -am 'Please consider the following formatting changes'
          cat << EOF
          ::error::clang-format failed.
          To reproduce it locally please run
              git checkout $PR_BRANCH
              git-clang-format --commit $base_commit --diff --style file
          Note: using clang-format version $(clang-format --version)
          Opening a PR to your branch with the fixes
          ::set-output name=cleanup_commit::HEAD
          ::set-output name=clean::false
          EOF

      - name: Update cleanup branch
        if: ${{ github.event.repository.owner.login == 'AliceO2Group' }}
        env:
          REMOTE_URL: https://alibuild:${{ secrets.ALIBUILD_GITHUB_TOKEN }}@github.com/alibuild/O2Physics
          PR_NUMBER: ${{ github.event.pull_request.number }}
          # An empty CLEANUP_COMMIT means delete the branch.
          CLEANUP_COMMIT: ${{ steps.clang_format.outputs.cleanup_commit }}
        run: |
          git push -f "$REMOTE_URL" "$CLEANUP_COMMIT:refs/heads/alibot-cleanup-$PR_NUMBER"

      - name: Create pull request with formatting changes
        uses: alisw/pull-request@v2
        if: ${{ github.event.repository.owner.login == 'AliceO2Group' }}
        with:
          source_branch: 'alibuild:alibot-cleanup-${{ github.event.pull_request.number }}'
          destination_branch: '${{ github.event.pull_request.head.label }}'
          github_token: ${{ secrets.ALIBUILD_GITHUB_TOKEN }}
          pr_title: >-
            Please consider the following formatting changes to
            #${{ github.event.pull_request.number }}
          pr_body: >-
            This PR cannot be merged as is. You should either run `clang-format`
            yourself and update the pull request, or merge this PR in yours.

            You can find the AliceO2 coding conventions at
            <https://github.com/AliceO2Group/CodingGuidelines>.
        continue-on-error: true  # We do not create PRs if the branch is not there.

      - name: Exit with error if the PR is not clean
        run: |
          case "${{ steps.clang_format.outputs.clean }}" in
            true) echo 'PR clean' ; exit 0 ;;
            false) echo 'PR not clean' ; exit 1 ;;
          esac

  copyright:
    name: copyright headers
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
          # We need the history of the dev branch all the way back to where the
          # PR diverged. We're fetching everything here, as we don't know how
          # many commits back that point is.
          fetch-depth: 0

      - name: Check copyright headers
        env:
          # The expected copyright notice.
          COPYRIGHT: |-
            // Copyright 2019-2020 CERN and copyright holders of ALICE O2.
            // See https://alice-o2.web.cern.ch/copyright for details of the copyright holders.
            // All rights not expressly granted are reserved.
            //
            // This software is distributed under the terms of the GNU General Public
            // License v3 (GPL Version 3), copied verbatim in the file "COPYING".
            //
            // In applying this license CERN does not waive the privileges and immunities
            // granted to it by virtue of its status as an Intergovernmental Organization
            // or submit itself to any jurisdiction.
        run: |
          # Find changed C++ files.
          readarray -d '' files < \
            <(git diff -z --diff-filter d --name-only --merge-base \
                  ${{ github.event.pull_request.base.sha }} -- '*.cxx' '*.h')
          # Run copyright notice check
          copyright_lines=$(echo "$COPYRIGHT" | wc -l)
          have_err=
          for file in "${files[@]}"; do
            if [ "$(head -n "$copyright_lines" "$file")" != "$COPYRIGHT" ]; then
              echo "File with incorrect copyright notice: $file"
              echo "::error file=$file,line=1,endLine=$copyright_lines,title=Missing or malformed copyright notice::This source file is missing the correct copyright notice."
              have_err=1
            fi
          done

          # Tell user what to do in case of copyright notice error
          if [ -n "$have_err" ]; then
            echo '::error::Some files are missing the correct copyright notice.'
            echo '::notice::Make sure all your source files begin with the following exact lines:'
            echo "$COPYRIGHT"
            exit 1
          fi

  whitespace:
    name: whitespace
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
          # We need the history of the dev branch all the way back to where the
          # PR diverged. We're fetching everything here, as we don't know how
          # many commits back that point is.
          fetch-depth: 0

      # Fetch the PR's head commit to find the common ancestor.
      - name: Fetch PR branch
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          git fetch origin "$BASE_BRANCH" "pull/$PR_NUMBER/head:$PR_BRANCH"

      - name: Find bad spacing
        env:
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
        run: |
          # Find changed files, ignoring binary files.
          readarray -d '' files < \
            <(git diff -z --diff-filter d --name-only --merge-base ${{ github.event.pull_request.base.sha }} |
                xargs -0r sh -c 'for f in "$@"; do file -bi "$f" | grep -q charset=binary || printf "%s\\0" "$f"; done' -)
          echo 'Changed text files are:'
          printf '%s\n' "${files[@]}"
          # Find tabs and trailing whitespaces in modified text files and show
          # where they are.
          exec awk '
            BEGIN { exit_code = 0 }
            function error(title, message) {
              printf "::error file=%s,line=%i,col=%i,endColumn=%i,title=%s::%s\n",
                     FILENAME, FNR, RSTART, RSTART + RLENGTH, title, message
              exit_code = 1
            }
            match($0, / +$/) {
              error("Trailing spaces",
                    "Remove the trailing spaces at the end of the line.")
            }
            match($0, /\t+/) {
              error("Tab characters found",
                    "Indent code using spaces instead of tabs.")
            }
            END {
              if (exit_code != 0) {
                print "Fix the errors in your editor (or with a command)"
                print "Command tips:"
                print "- Get list of files you changed: git diff --diff-filter d --name-only --merge-base upstream/" ENVIRON["BASE_BRANCH"]
                print "- Replace each tab with two spaces: sed -i \"s/\\t/  /g\" <files>"
                print "- Remove trailing whitespaces: sed -i \"s/[[:space:]]*$//\" <files>"
                print "To avoid these errors, configure your editor to:"
                print "- Emit spaces when the Tab key is pressed."
                print "- Display whitespace characters."
                print "- Replace tabs with spaces and remove trailing whitespaces when a file is saved."
              }
              exit exit_code
            }
          ' "${files[@]}"
